# Auth Endpoints

paths:
  /api/auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      description: Create a new user account and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: johndoe
                  minLength: 3
                  maxLength: 30
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: Password123
                confirmPassword:
                  type: string
                  format: password
                  example: Password123
                role:
                  type: string
                  enum: [student, teacher]
                  default: student
                  example: student
              required:
                - username
                - email
                - password
                - confirmPassword
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: "#/components/schemas/User"
                          token:
                            type: string
                            description: JWT token
                            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        400:
          description: Invalid input
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      errors:
                        type: object
                        example:
                          username: ["Username is already taken"]
                          password: ["Password must be at least 8 characters"]

  /api/auth/login:
    post:
      tags:
        - Auth
      summary: Log in to existing account
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: Password123
              required:
                - email
                - password
      responses:
        200:
          description: Successful login
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: "#/components/schemas/User"
                          token:
                            type: string
                            description: JWT token
                            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        401:
          description: Authentication failed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
                example:
                  success: false
                  message: "Invalid email or password"

  /api/auth/me:
    get:
      tags:
        - Auth
      summary: Get current user
      description: Return information about the currently authenticated user
      security:
        - bearerAuth: []
      responses:
        200:
          description: Current user information
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          user:
                            $ref: "#/components/schemas/User"
        401:
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
                example:
                  success: false
                  message: "Authentication required"

  /api/auth/refresh:
    post:
      tags:
        - Auth
      summary: Refresh JWT token
      description: Get a new JWT token using a refresh token
      security:
        - bearerAuth: []
      responses:
        200:
          description: New JWT token
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          token:
                            type: string
                            description: New JWT token
                            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        401:
          description: Refresh token is invalid or expired
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
                example:
                  success: false
                  message: "Refresh token expired"

  /api/auth/logout:
    post:
      tags:
        - Auth
      summary: Log out user
      description: Invalidate the current JWT token
      security:
        - bearerAuth: []
        - csrfToken: []
      responses:
        200:
          description: Successful logout
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
                example:
                  success: true
                  message: "Logged out successfully"
        401:
          description: Not authenticated
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
                example:
                  success: false
                  message: "Authentication required"

  /api/auth/reset-password:
    post:
      tags:
        - Auth
      summary: Request password reset
      description: Send a password reset email to the user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: john@example.com
              required:
                - email
      responses:
        200:
          description: Password reset email sent
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
                example:
                  success: true
                  message: "Password reset instructions sent to your email"
        400:
          description: Email not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
                example:
                  success: false
                  message: "Email not found"

  /api/auth/reset-password/confirm:
    post:
      tags:
        - Auth
      summary: Confirm password reset
      description: Reset password using token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: 1a2b3c4d5e6f7g8h9i
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: NewPassword123
                confirmPassword:
                  type: string
                  format: password
                  example: NewPassword123
              required:
                - token
                - password
                - confirmPassword
      responses:
        200:
          description: Password reset successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
                example:
                  success: true
                  message: "Password has been reset successfully"
        400:
          description: Invalid token or passwords
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiResponse"
                example:
                  success: false
                  message: "Invalid or expired token"
